---
interface Props {
  repo: string;
  file: string;
}

const { repo, file } = Astro.props;

async function fetchCommits() {
  // Construire l'URL de l'API pour obtenir les 100 derniers commits pour le fichier spécifié
  const url = new URL(`https://api.github.com/repos/${repo}/commits`);
  url.searchParams.set('path', `src/content/docs/${file}`);
  url.searchParams.set('per_page', 100);

  // Récupérer les commits depuis l'API GitHub avec une gestion d'erreurs
  const response = await fetch(url, {
    headers: {
      Accept: 'application/vnd.github+json',
      'User-Agent': 'starlight-contributors/1.0',
    },
  });


  return response.json();
}

// Fonction pour supprimer les doublons dans les commits
function removeDuplicates(commits: any[]) {
  if (!Array.isArray(commits)) return [];

  const map = new Map();
  for (const commit of commits) {
    const author = commit.author;
    if (author && author.id && author.login) {
      // Dédupliquer en se basant sur author.id
      map.set(author.id, { login: author.login, id: author.id });
    }
  }
  return Array.from(map.values());
}

// Récupérer les commits et traiter les données avant le rendu
const commits = await fetchCommits();
const uniqueAuthors = removeDuplicates(commits);
---

{uniqueAuthors.length > 0 && (
  <div class="page-authors">
    <p>Page authors</p>
    <ul class="smol-avatar-list not-content">
      {uniqueAuthors.map(({ login, id }) => (
        <li>
          <a href={`https://github.com/${login}`}>
            <img alt={`Contributor ${login}`} width="64" height="64" src={`https://avatars.githubusercontent.com/u/${id}`} />
          </a>
        </li>
      ))}
    </ul>
  </div>
)}

<style define:vars={{ 'avatar-count': uniqueAuthors.length }}>
.page-authors {
  display: flex;
  flex-direction: column;
  gap: 0.5em;
  font-size: var(--sl-text-sm);
  font-weight: 600;
}

.smol-avatar-list {
  --avatar-size: 2rem;
  display: grid;
  grid-template-columns: repeat(var(--avatar-count), max(44px, calc(var(--avatar-size) / 1.15)));
  padding: 0.08em;
  font-size: var(--avatar-size);
  list-style: none;
}

@media (any-hover: hover) and (any-pointer: fine) {
  .smol-avatar-list {
    grid-template-columns: repeat(calc(var(--avatar-count) + 1), calc(var(--avatar-size) / 1.75));
  }
}

.smol-avatar-list li {
  width: var(--avatar-size);
  height: var(--avatar-size);
}

.smol-avatar-list li:hover ~ li a,
.smol-avatar-list li:focus-within ~ li a {
  transform: translateX(33%);
}

.smol-avatar-list img,
.smol-avatar-list a {
  display: block;
  border-radius: 50%;
}

.smol-avatar-list a {
  transition: transform 180ms ease-in-out;
}

.smol-avatar-list img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  background-color: #fff;
  box-shadow: 0 0 0 0.05em #fff, 0 0 0 0.08em rgba(0, 0, 0, 0.15);
}

.smol-avatar-list a:focus {
  outline: 2px solid transparent;
  box-shadow: 0 0 0 0.08em #29344B, 0 0 0 0.12em white;
}
</style>