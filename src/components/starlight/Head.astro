---
import type { Props } from '@astrojs/starlight/props';
import StarlightHead from '@astrojs/starlight/components/Head.astro';
import VtbotStarlight from 'astro-vtbot/components/starlight/Base.astro';
import Default from '@astrojs/starlight/components/Head.astro';

// Get the URL of the generated image for the current page using its
// ID and replace the file extension with `.png`.
const ogImageUrl = new URL(
  `/og/${Astro.props.id.replace(/\.\w+$/, '.png')}`,
  Astro.site,
)
---

<VtbotStarlight {...Astro.props} transition:animate="initial">
  <StarlightHead {...Astro.props}><slot /></StarlightHead>
</VtbotStarlight>

<!-- Render the default <Head/> component. -->
<Default {...Astro.props}><slot /></Default>

<!-- Render the <meta/> tags for the Open Graph images. -->
<meta property="og:image" content={ogImageUrl} />
<meta name="twitter:image" content={ogImageUrl} />

<style>
  background-color: transparent;
</style>

<script>
  // Function to calculate the width of the longest title
function adjustSidebarWidth() {
    const sidebar = document.querySelector('.sidebar-pane');
    const titles = document.querySelectorAll('.sidebar-pane summary');
    
    let maxWidth = 0;
    
    // Loop through each title and calculate its width
    titles.forEach((title) => {
        const titleWidth = title.offsetWidth;
        if (titleWidth > maxWidth) {
            maxWidth = titleWidth;
        }
    });
    
    // Adjust the sidebar width based on the longest title
    sidebar.style.width = (maxWidth + 40) + 'px'; // Adding some padding
}

// Call the function on page load
document.addEventListener('DOMContentLoaded', adjustSidebarWidth);

// Re-adjust the sidebar width if the window is resized
window.addEventListener('resize', adjustSidebarWidth);
</script>